<?xml version="1.0" encoding="UTF-8" ?>
<!-- DOCTYPE이 sqlMap은 처리할 SQL 명령을 기억하는 xml 파일이다. -->
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="com.koreait.vo.GuestbookVO">
	<!-- id : SQL 명령을 식별한다. -->
	<!-- parameterClass : SQL 명령으로 전달되는 데이터의 타입을 적는다. -->
	<!-- resultClass : SQL 명령문에의해 출력되는 데이터의 타입을 적는다. -->

	<!-- 게시글 한 건을 저장한다. -->
	<insert id="insert" parameterClass="com.koreait.vo.GuestbookVO">
		<!-- nextval => 시퀀스의 값을 1증가 시킨다. -->
		insert into guestbook (idx, name, password, memo, ip) values (guestbook_idx_seq.nextval, #name#, #password#, #memo#, #ip#)
	</insert>
	
	<!-- 테이블에 저장된 전체 글의 개수를 얻어온다. -->
	<select id="selectCount" resultClass="int">
		select count(*) from guestbook
	</select>
	
	<!-- 1페이지 분량의 글 목록을 얻어온다. -->
	<select id="selectList" parameterClass="java.util.HashMap" resultClass="com.koreait.vo.GuestbookVO">
		<!-- <![CDATA[ 와 ]]> 사이에 입력된 내용은 무조건 문자열로 취급된다. -->
		<![CDATA[
		select * from (
			select rownum rnum, TT.* from (
				select * from guestbook order by idx desc
			) TT where rownum <= #endNo#
		) where rnum >= #startNo#
		]]>
	</select>
	
	<!-- memo에 검색어가 포함된 글의 개수를 얻어온다. -->
	<select id="selectCountMemo" parameterClass="String" resultClass="int">
		<!--
			ibatis 부분일치(like) 쿼리 작성 방법
			oracle : like '%'||#검색어#||'%'
			mssql : like '%'+#검색어#+'%'
			mysql : like concat('%', #검색어#, '%')
		-->
		select count(*) from guestbook where memo like '%'||#item#||'%'
	</select>
	
	<!-- memo에 검색어가 포함된 1페이지 분량의 글 목록을 얻어온다. -->
	<select id="selectListMemo" parameterClass="com.koreait.vo.Param" resultClass="com.koreait.vo.GuestbookVO">
		<![CDATA[
		select * from (
			select rownum rnum, TT.* from (
				select * from guestbook where memo like '%'||#item#||'%' order by idx desc
			) TT where rownum <= #endNo#
		) where rnum >= #startNo#
		]]>
	</select>
	
	<!-- name에 검색어가 포함된 글의 개수를 얻어온다. -->
	<select id="selectCountName" parameterClass="String" resultClass="int">
		select count(*) from guestbook where name like '%'||#item#||'%'
	</select>
	
	<!-- name에 검색어가 포함된 1페이지 분량의 글 목록을 얻어온다. -->
	<select id="selectListName" parameterClass="com.koreait.vo.Param" resultClass="com.koreait.vo.GuestbookVO">
		<![CDATA[
		select * from (
			select rownum rnum, TT.* from (
				select * from guestbook where name like '%'||#item#||'%' order by idx desc
			) TT where rownum <= #endNo#
		) where rnum >= #startNo#
		]]>
	</select>
	
	<!-- name과 memo에 검색어가 포함된 글의 개수를 얻어온다. -->
	<select id="selectCountNameMemo" parameterClass="String" resultClass="int">
		select count(*) from guestbook where name like '%'||#item#||'%' or memo like '%'||#item#||'%'
	</select>
	
	<!-- name과 memo에 검색어가 포함된 1페이지 분량의 글 목록을 얻어온다. -->
	<select id="selectListNameMemo" parameterClass="com.koreait.vo.Param" resultClass="com.koreait.vo.GuestbookVO">
		<![CDATA[
		select * from (
			select rownum rnum, TT.* from (
				select * from guestbook where name like '%'||#item#||'%' or memo like '%'||#item#||'%' order by idx desc
			) TT where rownum <= #endNo#
		) where rnum >= #startNo#
		]]>
	</select>
	
	<!-- 카테고리별 검색어를 포함하는 글의 개수를 얻어온다. -->
	<select id="selectCountMulti" parameterClass="com.koreait.vo.Param" resultClass="int">
	
		<!--
			<isEqual> 태그를 사용해 sql 명령의 실행 조건을 비교할 수 있다.
			property 속성에는 parameterClass로 넘어오는 조건을 비교할 키 또는 멤버 변수 이름을 적는다.
			compareValue 속성에는 property 속성에서 지정한 키 또는 멤버 변수에 저장된 값과 비교할 값을 적는다.
		-->
		
		<!--
		<isEqual property="category" compareValue="이름">
			select count(*) from guestbook where name like '%'||#item#||'%'
		</isEqual>
		<isEqual property="category" compareValue="내용">
			select count(*) from guestbook where memo like '%'||#item#||'%'
		</isEqual>
		<isEqual property="category" compareValue="이름+내용">
			select count(*) from guestbook where name like '%'||#item#||'%' or memo like '%'||#item#||'%'
		</isEqual>
		-->
		
		select count(*) from guestbook where 
		<isEqual property="category" compareValue="이름"> <!-- 카테고리가 이름이면 -->
			name like '%'||#item#||'%'
		</isEqual>
		<isEqual property="category" compareValue="내용"> <!-- 카테고리가 내용이면 -->
			memo like '%'||#item#||'%'
		</isEqual>
		<isEqual property="category" compareValue="이름+내용"> <!-- 카테고리가 이름+내용이면 -->
			name like '%'||#item#||'%' or memo like '%'||#item#||'%'
		</isEqual>
	
	</select>
	
	<!-- 카테고리별 검색어를 포함된 1페이지 분량의 글 목록을 얻어온다. -->
	<select id="selectListMulti" parameterClass="param" resultClass="vo">
		select * from (
			select rownum rnum, TT.* from (
				select * from guestbook where 
				
					<isEqual property="category" compareValue="이름"> <!-- 카테고리가 이름이면 -->
						name like '%'||#item#||'%'
					</isEqual>
					<isEqual property="category" compareValue="내용"> <!-- 카테고리가 내용이면 -->
						memo like '%'||#item#||'%'
					</isEqual>
					<isEqual property="category" compareValue="이름+내용"> <!-- 카테고리가 이름+내용이면 -->
						name like '%'||#item#||'%' or memo like '%'||#item#||'%'
					</isEqual>
					 
				order by idx desc
		<![CDATA[
			) TT where rownum <= #endNo#
		) where rnum >= #startNo#
		]]>
	</select>
	
	<!-- 글 1건을 얻어온다. -->
	<select id="selectByidx" parameterClass="int" resultClass="com.koreait.vo.GuestbookVO">
		select * from guestbook where idx = #int#
	</select>
	
	<!-- 글 1건을 삭제한다. -->
	<delete id="delete" parameterClass="int">
		delete from guestbook where idx = #idx#
	</delete>
	
	<!-- 글 1건을 수정한다. -->
	<update id="update" parameterClass="vo">
		update guestbook set name = #name#, memo = #memo# where idx = #idx#
	</update>
	
</sqlMap>














