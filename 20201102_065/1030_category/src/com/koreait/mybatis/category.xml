<?xml version="1.0" encoding="UTF-8" ?>
<!-- DOCTYPE이 mapper인 xml 파일은 실행할 sql 명령을 입력한다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koreait.category.CategoryVO">

	<!-- id : sql 명령을 식별한다. -->
	<!-- parameterType : sql 명령으로 전달되는 데이터의 타입을 적는다. -->
	<!-- resultType : sql 명령 실행결과 리턴되는 데이터의 타입을 적는다. -->
	
	<!-- 메인 카테고리를 저장한다. -->
	<insert id="insert" parameterType="com.koreait.category.CategoryVO">
		<!--
			ibatis는 parameterClass로 지정된 객체 형태로 sql 명령으로 넘어온 데이터를 #과 # 사이에 코딩했지만 mybatis는 parameterType으로
			지정된 객체 형태로 sql 명령으로 넘어온 데이터를 #{와 } 사이에 코딩한다.
			nextval => 시퀀스를 증가시킨다. currval => 현재 시퀀스 값을 의미한다.
		-->
		insert into category (idx, category, ref, lev, seq) 
		values (category_idx_seq.nextval, #{category}, category_idx_seq.currval, 0, 0)
	</insert>
	
	<!-- 테이블에 저장된 모든 카테고리를 글 그룹(ref)의 내림차순, 같은 글 그룹에서는 글의 순서(seq)의 오름차순으로 얻어온다. -->
	<select id="selectList" resultType="vo">
		select * from category order by ref desc, seq asc
	</select>
	
	<!-- 같은 카테고리 그룹에서 카테고리 출력 순서를 조정하기 위해 seq를 수정한다. -->
	<update id="increment" parameterType="java.util.HashMap">
		<!-- ref, seq는 category 테이블의 필드이고 #{ref}, #{seq}는 HashMap 객체에 저장되서 넘어온 데이터의 key -->
		update category set seq = seq + 1 where ref = #{ref} and seq >= #{seq}
	</update>
	
	<!-- 서브 카테고리를 저장한다. -->
	<insert id="reply" parameterType="vo">
		insert into category (idx, category, ref, lev, seq) values (category_idx_seq.nextval, #{category}, #{ref}, #{lev}, #{seq})
	</insert>
	
	<!-- 카테고리 한 건을 얻어온다. -->
	<select id="selectByIdx" parameterType="int" resultType="vo">
		select * from category where idx = #{idx}
	</select>
	
	<!-- 카테고리 한 건을 삭제한다. -->
	<delete id="delete" parameterType="int">
		delete from category where idx = #{idx}
	</delete>
	
</mapper>











